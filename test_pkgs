#!/bin/sh -eux

# Copyright 2015-2022 Yury Gribov
# 
# Use of this source code is governed by MIT license that can be
# found in the LICENSE.txt file.

# Hacky script to apply SortChecker to arbitrary Debian packages.
# Run as
#   test_pkgs pak1 pak2...

error() {
  echo >&2 "$(basename $0): error: $@"
  exit 1
}

warn() {
  echo >&2 "$(basename $0): warning: $@"
}

sum() {
  res=0
  while read x; do
    res=$((res + x))
  done
  echo $res
}

tic() {
  tstart=$(date +%s)
}

toc() {
  local tend
  tend=$(date +%s)
  echo $((tend - tstart))
}

SHARED_DIR=$PWD/pbuilder-shared
TARGET_SHARED_DIR=/$(basename $SHARED_DIR)
REL=$(lsb_release -cs)  # Should match pbuilder's chroot!

print_help_and_exit() {
  cat <<EOF
$(basename $0) [OPT] PKG...
Build and run tests for Debian packages.

Available options:
  --cowbuilder       Use cowbuilder (instead of pbuilder).
  --disable-hooks    Do not run hooks in pbuild-shared.
  --disable-timeout  Do not abort build on timeout (for manual debug).
  -h, --help         Print this message and exit.
  --pbuilder         Use pbuilder (instead of cowbuilder).
  --pbuilder-opts O  Forward options to pbuilder/cowbuilder.
  --shell-on-error   Drop to interactive shell on error.
  --shell-on-start   Drop to interactive shell before build.
  --shell-on-finish  Drop to interactive shell on completion.
  --timeout TO       Specify timeout for package build. TO has standard
                     duration syntax [0-9]*[hms] (e.g. 100m or 1h).
                     Automatically enabled on any --shell-on-*.
EOF
  exit
}

error() {
  echo >&2 "$(basename $0): error: $@"
  exit 1
}

TEMP=$(getopt -o 'ht:' --long 'cowbuilder,disable-hooks,disable-timeout,help,pbuilder,pbuilder-opts:,shell-on-start,shell-on-finish,shell-on-error,timeout:' -n $(basename $0) -- "$@")
eval set -- "$TEMP"

ENABLE_HOOKS=1
TO='--timeout 2h'
PB_OPTS=
PBUILDER=cowbuilder
while true; do
  case "$1" in
    --pbuilder)
      PBUILDER=pbuilder
      shift
      ;;
    --cowbuilder)
      PBUILDER=cowbuilder
      shift
      ;;
    --shell-on-start)
      SHELL_ON_START=1
      TO=
      shift
      ;;
    --shell-on-finish)
      SHELL_ON_FINISH=1
      TO=
      shift
      ;;
    --shell-on-error)
      SHELL_ON_ERROR=1
      TO=
      shift
      ;;
    --disable-hooks)
      ENABLE_HOOKS=
      shift
      ;;
    --disable-timeout)
      TO=
      shift
      ;;
    --timeout | -t)
      TO="--timeout $2"
      shift 2
      ;;
    --pbuilder-opts)
      PB_OPTS="$2"
      shift 2
      ;;
    -h | --help)
      print_help_and_exit
      ;;
    --)
      shift
      break
      ;;
    -*)
      error "unknown option: $1"
      ;;
    *)
      error 'internal error'
      ;;
  esac
done

if test $# -eq 0; then
  error "no packages specified"
fi

tic

# Do not hang VM...
MEM=$(cat /proc/meminfo | awk '/MemTotal:/{print $2}')
ulimit -S -v $((MEM / 4))


if ! test -f pbuilder-hooks/B*autopkgtest; then
  warn "it's recommended to install B92autopkgtest (available in pbuilder since 2.17)"
fi

mkdir -p src $SHARED_DIR
rm -rf src/*

cat <<EOF > pbuilderrc
export COMPONENTS='main universe multiverse restricted'
export V=1
export VERBOSE=1
export SHARED_DIR=$TARGET_SHARED_DIR
export SHELL_ON_START=${SHELL_ON_START:-}
export SHELL_ON_FINISH=${SHELL_ON_FINISH:-}
export SHELL_ON_ERROR=${SHELL_ON_ERROR:-}
export ENABLE_HOOKS=${ENABLE_HOOKS:-}
EOF

if test -n "${ENABLE_HOOKS:-}" -a -x $SHARED_DIR/hooks/env; then
  $SHARED_DIR/hooks/env >> pbuilderrc
fi

# Generate name of output dir
idx=1
for d in test_pkgs.[0-9]*; do
  test -d $d || continue
  d_idx=$(echo $d | sed 's/^test_pkgs\.//')
  if test $idx -le $d_idx; then
    idx=$((d_idx + 1))
  fi
done
ODIR=test_pkgs.$idx

mkdir -p $ODIR
date > $ODIR/stamp

ulimit -c unlimited  # For children

N=$#
I=0
NFAILS=0
NSKIPS=0
for p in $@; do
  I=$((I+1))
  echo "TESTING PACKAGE $p ($I/$N)"

  if test -d $ODIR/$p; then
    warn "$p already tested"
    continue
  fi

  # Workaround for network shutdowns on Ubuntu 16
  # FIXME: get rid of this !!!
  if ! ping -c5 us.archive.ubuntu.com >/dev/null 2>&1; then
    for srv in network-manager networking; do
      if service --status-all 2>&1 | grep -q $srv; then
        sudo service $srv restart
      fi
    done
  fi

  # Skip large assets
  size=$(apt-cache show $p/$REL | grep ^Size: | awk '{print $2}' | sum)
  if test $size -gt $(( 128 * 1024 * 1024 )); then
    NSKIPS=$((NSKIPS+1))
    warn "skipping large package $p"
    continue
  fi

  if ! (cd src && rm -rf * && apt-get source $p/$REL); then
    # May be caused by changes on server so don't die
    NSKIPS=$((NSKIPS+1))
    warn "failed to download package $p"
    continue
  fi

  if ! ls src | grep -q '\.dsc'; then
    error "no .dsc file in package $p"
  fi

  # Run job

  mkdir $ODIR/$p

  start_time=$(date +'%F %T')

  if ! nice sudo $PBUILDER \
      --build $TO \
      --logfile $ODIR/$p/stdout_stderr.txt \
      --configfile pbuilderrc \
      --hookdir pbuilder-hooks \
      --bindmounts $SHARED_DIR:$TARGET_SHARED_DIR ${PB_OPTS:-} \
      src/*.dsc < /dev/null; then
    warn "failed to build package $p"
    NFAILS=$((NFAILS + 1))
  fi

  # Copy additional outputs

  if ! which journalctl > /dev/null; then
    echo >&2 'warning: journalctl not installed, syslog will not be collected'
  else
    journalctl -k -S "$start_time" > $ODIR/$p/syslog
  fi

  # Not all files may be copyable is finish hook failed to change perms due to timeout
  cp -r $SHARED_DIR/output $ODIR/$p || true

  sync
done

t=$(toc)
t=$(echo "scale=2; $t / 60 / 60" | bc)

echo "Built $N unique packages in $t hours ($NFAILS failed, $NSKIPS skipped)"
