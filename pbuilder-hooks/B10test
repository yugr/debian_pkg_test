#!/bin/sh -ex

# Copyright 2015-2017 Yury Gribov
# 
# Use of this source code is governed by MIT license that can be
# found in the LICENSE.txt file.

TIMEOUT='timeout -k 1m 30m'

find_top_makefile() {
  if test -f obj-x86_64-linux-gnu/Makefile; then
    echo obj-x86_64-linux-gnu/Makefile
    return
  fi
  for makefile in $(find -name Makefile); do
    depth=$(echo $makefile | grep -o / | wc -l)
    echo $makefile $depth
  done | sort -nk2 | head -1 | awk '{print $1}'
}

print_make_goals() {
  grep -o '^[A-Za-z0-9_]\+:' Makefile
}

try_build_goal() {
  print_make_goals | grep -q "^$1:" || return 1
  $TIMEOUT make -k "$1" < /dev/null || true
}

try_build_goals() {
  for g in $@; do
    if try_build_goal $g; then
      return 0
    fi
  done
  return 1
}

try_build_subdirs() {
  for subdir in test tests testsuite example examples; do
  for g in $@; do
    if (test -d $subdir && test -f $subdir/Makefile && cd $subdir && try_build_goal $g); then
      return 0
    fi
  done
  done
  return 1
}

ROOT=/tmp/buildd/*/debian/..
cd $ROOT

makefile=$(find_top_makefile)
ninja=$(find -name build.ninja | head -1)
meson=$(find -name meson-info | head -1)

ulimit -c unlimited

# TODO: run tests as build user, not root

if test -n "$makefile"; then
  cd $(dirname $makefile)

  # Best effort to run package standard tests here.
  # Note that these might have already run under dh_auto_test
  # but that's fine (more testing wouldn't hurt).

  # First try top-level Makefile
  # TODO: we could try `dh_auto_build $g' instead of this mess?
  test_goals='check-all check checks test tests'
  if try_build_goals $test_goals; then
    :
  elif try_build_subdirs $test_goals all; then  # Note that we try 'all' as a last resort
    # TODO: do we really need this mess?
    # TODO: another approach - grep sub-Makefiles for interesting goals.
    :
  else
    echo >&2 "$(basename $0): don't know how to run tests in $PWD; here are the top-level goals:"
    print_make_goals >&2 || true
#    echo >&2 "And here is the directory contents:"
#    ls -R $ROOT >&2
    $(dirname $0)/C10shell
  fi
elif test -n "$ninja"; then
  for goal in test check check-all checks tests; do
    ninja -C $(dirname $ninja) $goal || continue
    break
  done
elif test -n "$meson"; then
  cd $(dirname $meson)
  meson test
elif test \( -f Build.PL -o -f Makefile.PL \) -a -x Build; then
  # Module::Build-style Perl package
  $TIMEOUT ./Build test < /dev/null || true
elif test -f setup.py; then
  # Python setuptools-based package
  apt-get install -y --force-yes python-dev python-nose
  $TIMEOUT python setup.py test < /dev/null || true  # TODO: python3 ?
else
  # Other buildsystems (waf e.g. sushi, scons e.g. balder2d, gradle, bazel)
  # or languages (Lua e.g. teeworlds, Ruby e.g. bsfilter)
  # seem to be too rare to bother.
  echo >&2 "$(basename $0): don't know type of project in $PWD"
#  echo >&2 "And here is the directory contents:"
#  ls -R $ROOT >&2
  $(dirname $0)/C10shell
fi

# Ensure that test_pkgs can access files
chmod -R a+rw $SHARED_DIR/output

